{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AACA,OAAO,WAAoC,MAAM,cAAc,CAAC;AAEhE,OAAO,SAAS,EAAE,EAAE,eAAe,EAAE,MAAM,IAAI,CAAC;AAkBhD,MAAM,iBAAiB,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAoB,EAAU,EAAE;IAC7F,IAAI,EAAuB,CAAC;IAC5B,IAAI,GAAoB,CAAC;IACzB,OAAO;QACH,IAAI,EAAE,sCAAsC;QAC5C,UAAU;YACN,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,GAAG,EAAE;oBACN,GAAG,GAAG,IAAI,eAAe,CAAC,gBAAgB,CAAC,CAAC;oBAC5C,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,EAAE;wBACtB,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC1B,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC;oBACH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;wBAClB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACnB,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,gCAAgC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC;iBACpG;aACJ;iBAAM;gBACH,IAAI,CAAC,EAAE,EAAE;oBACL,EAAE,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;iBAC7B;gBACD,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;oBACZ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACpB;aACJ;QACL,CAAC;QACD,WAAW;YACP,IAAI,SAAS,EAAE;gBACX,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACzB,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,EAAE;wBACtC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,CAAC,CAAC;qBACrG;gBACL,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,IAAI,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE;oBACjB,EAAE,CAAC,MAAM,EAAE,CAAC;iBACf;aACJ;QACL,CAAC;KACJ,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,iBAAiB,CAAC","sourcesContent":["import type { Plugin } from 'rollup';\nimport browserSync, { BrowserSyncInstance } from 'browser-sync';\nimport type { Options } from 'browser-sync';\nimport WebSocket, { WebSocketServer } from 'ws';\n\ninterface OptionsType {\n    options: Options & { snippet?: boolean };\n    extReload?: false;\n    extReloadOptions?: never;\n}\n\ninterface OptionsTypeWithReload {\n    options: Options & { snippet?: boolean };\n    extReload: true;\n    extReloadOptions: {\n        port: number;\n    };\n}\n\ntype OptionsTypeFinal = OptionsType | OptionsTypeWithReload;\n\nconst browserSyncPlugin = ({ options, extReload, extReloadOptions }: OptionsTypeFinal): Plugin => {\n    let bs: BrowserSyncInstance;\n    let wss: WebSocketServer;\n    return {\n        name: 'rollup-plugin-browser-sync-extension',\n        buildStart() {\n            if (extReload) {\n                if (!wss) {\n                    wss = new WebSocketServer(extReloadOptions);\n                    wss.on('connection', ws => {\n                        ws.on('error', this.warn);\n                        console.log('\\x1b[1m\\x1b[32m%s\\x1b[0m', 'Connection Successful');\n                    });\n                    wss.on('error', err => {\n                        this.warn(err);\n                    });\n                    console.log('\\x1b[1m\\x1b[32m%s\\x1b[0m', `Listen extension reload port ${extReloadOptions.port}`);\n                }\n            } else {\n                if (!bs) {\n                    bs = browserSync.create();\n                }\n                if (!bs.active) {\n                    bs.init(options);\n                }\n            }\n        },\n        writeBundle() {\n            if (extReload) {\n                wss.clients.forEach(client => {\n                    if (client.readyState === WebSocket.OPEN) {\n                        client.send('Reloading', () => console.log('\\x1b[1m\\x1b[32m%s\\x1b[0m', 'Extension Reloading...'));\n                    }\n                });\n            } else {\n                if (bs && bs.active) {\n                    bs.reload();\n                }\n            }\n        },\n    };\n};\n\nexport default browserSyncPlugin;\n"]}