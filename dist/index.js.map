{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AACA,OAAO,WAAoC,MAAM,cAAc,CAAC;AAEhE,OAAO,SAAS,EAAE,EAAE,eAAe,EAAE,MAAM,IAAI,CAAC;AAUhD,MAAM,iBAAiB,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAe,EAAU,EAAE;IAC1F,IAAI,EAAuB,CAAC;IAC5B,IAAI,GAAoB,CAAC;IAEzB,IAAI,SAAS,EAAE;QACb,GAAG,GAAG,IAAI,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAC5C,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,EAAE;YACxB,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,EAAE,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;KAC3B;IAED,OAAO;QACL,IAAI,EAAE,4BAA4B;QAClC,WAAW;YACT,IAAI,SAAS,EAAE;gBACb,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAC3B,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,EAAE;wBACxC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACzB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;qBACvC;gBACH,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,EAAE,CAAC,MAAM,EAAE;oBACb,EAAE,CAAC,MAAM,EAAE,CAAC;iBACb;qBAAM;oBACL,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClB;aACF;QACH,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,iBAAiB,CAAC","sourcesContent":["import type { Plugin, AddonHookFunction } from 'rollup';\nimport browserSync, { BrowserSyncInstance } from 'browser-sync';\nimport type { Options } from 'browser-sync';\nimport WebSocket, { WebSocketServer } from 'ws';\n\ntype OptionsType = {\n  options: Options;\n  extReload?: boolean;\n  extReloadOptions?: {\n    port: number;\n  };\n};\n\nconst browserSyncPlugin = ({ options, extReload, extReloadOptions }: OptionsType): Plugin => {\n  let bs: BrowserSyncInstance;\n  let wss: WebSocketServer;\n\n  if (extReload) {\n    wss = new WebSocketServer(extReloadOptions);\n    wss.on('connection', ws => {\n      ws.on('error', console.error);\n      console.log('Connection OK');\n    });\n  } else {\n    bs = browserSync.create();\n  }\n\n  return {\n    name: 'rollup-plugin-browser-sync',\n    writeBundle() {\n      if (extReload) {\n        wss.clients.forEach(client => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send('reloading');\n            console.log('Extension Reloading...');\n          }\n        });\n      } else {\n        if (bs.active) {\n          bs.reload();\n        } else {\n          bs.init(options);\n        }\n      }\n    },\n  };\n};\n\nexport default browserSyncPlugin;\n\n// ws.on('message', data => {\n//   console.log('Message from client:', data.toString());\n// });\n"]}